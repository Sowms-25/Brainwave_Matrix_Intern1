import java.util.*;
public class Task1 {
	 public static void main(String[] args) {
	        Bank bank = new Bank();
	        bank.initializeSampleAccounts(); // Prepopulate with sample data
	        bank.runATM(); // Start ATM interface
	    }
	}

	class Bank {
	    private Map<Integer, Account> accounts = new HashMap<>();

	    // Initialize sample accounts
	    public void initializeSampleAccounts() {
	        accounts.put(12345, new Account(12345, "John Doe", 1234, 5000.0));
	        accounts.put(67890, new Account(67890, "Jane Smith", 5678, 3000.0));
	    }

	    // Main ATM logic
	    public void runATM() {
	        Scanner scanner = new Scanner(System.in);
	        System.out.println("Welcome to the ATM!");

	        try {
	            System.out.print("Enter Account Number: ");
	            String accountInput = scanner.nextLine(); // Read as String for validation
	            int accountNumber = Integer.parseInt(accountInput); // Convert to integer

	            System.out.print("Enter PIN: ");
	            int pin = scanner.nextInt();

	            Account account = accounts.get(accountNumber);

	            if (account != null && account.verifyPIN(pin)) {
	                System.out.println("Login successful!");
	                account.showMenu();
	            } else {
	                System.out.println("Invalid account number or PIN!");
	            }
	        } catch (NumberFormatException e) {
	            System.out.println("Invalid input! Account number must be numeric.");
	        } catch (InputMismatchException e) {
	            System.out.println("Invalid input! PIN must be numeric.");
	        }
	    }
	}

	class Account {
	    private int accountNumber;
	    private String accountHolder;
	    private int pin;
	    private double balance;
	    private List<String> transactionHistory = new ArrayList<>();

	    // Constructor
	    public Account(int accountNumber, String accountHolder, int pin, double balance) {
	        this.accountNumber = accountNumber;
	        this.accountHolder = accountHolder;
	        this.pin = pin;
	        this.balance = balance;
	    }

	    // Verify PIN
	    public boolean verifyPIN(int enteredPin) {
	        return this.pin == enteredPin;
	    }

	    // Display ATM menu
	    public void showMenu() {
	        Scanner scanner = new Scanner(System.in);
	        while (true) {
	            System.out.println("\nATM Menu:");
	            System.out.println("1. Check Balance");
	            System.out.println("2. Deposit");
	            System.out.println("3. Withdraw");
	            System.out.println("4. Transaction History");
	            System.out.println("5. Exit");
	            System.out.print("Choose an option: ");
	            int choice = scanner.nextInt();

	            switch (choice) {
	                case 1 -> System.out.println("Current Balance: $" + balance);
	                case 2 -> {
	                    System.out.print("Enter deposit amount: ");
	                    double amount = scanner.nextDouble();
	                    deposit(amount);
	                }
	                case 3 -> {
	                    System.out.print("Enter withdrawal amount: ");
	                    double amount = scanner.nextDouble();
	                    withdraw(amount);
	                }
	                case 4 -> showTransactionHistory();
	                case 5 -> {
	                    System.out.println("Thank you for using the ATM!");
	                    return;
	                }
	                default -> System.out.println("Invalid option. Please try again.");
	            }
	        }
	    }

	    // Deposit money
	    private void deposit(double amount) {
	        if (amount > 0) {
	            balance += amount;
	            transactionHistory.add("Deposited: $" + amount);
	            System.out.println("Deposit successful! New balance: $" + balance);
	        } else {
	            System.out.println("Invalid deposit amount.");
	        }
	    }

	    // Withdraw money
	    private void withdraw(double amount) {
	        if (amount > 0 && amount <= balance) {
	            balance -= amount;
	            transactionHistory.add("Withdrew: $" + amount);
	            System.out.println("Withdrawal successful! New balance: $" + balance);
	        } else {
	            System.out.println("Invalid withdrawal amount or insufficient funds.");
	        }
	    }

	    // Show transaction history
	    private void showTransactionHistory() {
	        if (transactionHistory.isEmpty()) {
	            System.out.println("No transactions to display.");
	        } else {
	            System.out.println("\nTransaction History:");
	            for (String transaction : transactionHistory) {
	                System.out.println(transaction);
	            }
	        }
       }
	}

